using Macena.GitHub.Core.ErrorCodes;
using Macena.GitHub.Core.Extensions;
using Macena.GitHub.Models;
using Microsoft.Extensions.Logging;

namespace Macena.GitHub.Core.Operation
{
    /// <summary>
    /// Base class for implementing operations that validate and process requests asynchronously.
    /// </summary>
    /// <typeparam name="TRequest">The type of request handled by the operation.</typeparam>
    /// <typeparam name="TResponse">The type of response generated by the operation.</typeparam>
    abstract public class BaseOperation<TRequest, TResponse> : IBaseOperation<TRequest, TResponse>
        where TRequest : OperationRequest
        where TResponse : OperationResponse, new()
    {
        /// <summary>
        /// Logging service used by the operation.
        /// </summary>
        protected ILogger Logger { get; }

        /// <summary>
        /// Initializes a new instance of the BaseOperation class with the specified logger.
        /// </summary>
        /// <param name="logger">The logger instance to be used by the operation.</param>
        public BaseOperation(ILogger logger)
        {
            this.Logger = logger ?? throw new ArgumentException(nameof(logger));
        }

        /// <summary>
        /// Validates the request asynchronously.
        /// </summary>
        /// <param name="request">The request to validate.</param>
        /// <returns>A task representing the asynchronous operation, with a result of the validation response.</returns>
        public async Task<OperationResponse> ValidateAsync(TRequest request)
        {
            OperationResponse response = new();

            if (request == null)
            {
                response.AddError(
                    (int)ErrorCodeEnum.FieldIsNullOrEmpty,
                    ErrorCodeEnum.FieldIsNullOrEmpty.Description(),
                    nameof(request));
            }

            return response.Success ? await this.ValidateOperationAsync(request) : response;
        }

        /// <summary>
        /// Validates the operation asynchronously.
        /// </summary>
        /// <param name="request">The request to validate.</param>
        /// <returns>A task representing the asynchronous operation, with a result of the validation response.</returns>
        virtual public async Task<OperationResponse> ValidateOperationAsync(TRequest request)
        {
            return await Task.Run(() =>
            {
                return new OperationResponse();
            });
        }

        /// <summary>
        /// Processes the request asynchronously.
        /// </summary>
        /// <param name="request">The request to process.</param>
        /// <returns>A task representing the asynchronous operation, with a result of the processing response.</returns>
        public async Task<TResponse> ProcessAsync(TRequest request)
        {
            var response = new TResponse();

            try
            {
                this.Logger.LogDebug("Initiating Operation -> Request Validation.");
                var validationResponse = await this.ValidateAsync(request);
                this.Logger.LogDebug($"Validation Status '{validationResponse.Success}' Operation");

                if (validationResponse.Success)
                {
                    response = await this.ProcessOperationAsync(request);
                }
                else
                {
                    response.Errors = validationResponse.Errors;
                }
            }
            catch (HttpRequestException ex)
            {
                response.AddError((int)ErrorCodeEnum.CommunicationError, $"{ErrorCodeEnum.CommunicationError.Description()}: {ex.Message}");
                this.Logger.LogCritical(ex, ErrorCodeEnum.CommunicationError.Description());

                return response;
            }
            catch (Exception ex)
            {
                response.AddError((int)ErrorCodeEnum.UnexpectedError, $"{ErrorCodeEnum.UnexpectedError.Description()}: {ex.Message}");
                this.Logger.LogCritical(ex, ErrorCodeEnum.UnexpectedError.Description());

                return response;
            }

            return response;
        }

        /// <summary>
        /// Processes the operation asynchronously.
        /// </summary>
        /// <param name="request">The request to process.</param>
        /// <returns>A task representing the asynchronous operation, with a result of the processing response.</returns>
        abstract protected Task<TResponse> ProcessOperationAsync(TRequest request);
    }
}
